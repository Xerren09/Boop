<!DOCTYPE html>
<head>
    <title>{{ projectName }} details</title>
    <link rel="stylesheet" href="/common.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.9.0/css/fontawesome.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.9.0/css/solid.min.css" />
    <script crossorigin src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
</head>
<body>
    <div id="main">
        <div id="content">
            <div id="header">
                <h1>Boop!</h1>
                <p>A lightweight development server for hosting websites and NodeJS apps.</p>
            </div>
            <div id="container">
                <div id="projects">
                    <!-- List Projects here -->
                </div>
            </div>
        </div>
    </div>
    <script>
        function copyAddress(elementID) {
            var address = document.getElementById(elementID).innerText.toString().trim();
            navigator.clipboard.writeText(address);
        } 
    </script>
    <script type="text/babel">
        const project = {{ project }};
        const domain = "{{ domain }}";
        const copy = (elementID) => {
            var address = document.getElementById(elementID).innerText.toString().trim();
            navigator.clipboard.writeText(address);
        };
        function prettyPrintLog(flow) {
            const cmdPrint = (cmdFlow)=>{
                let cmdFlowP = `\n>>>>>>>>>`;
                cmdFlowP += `\n\n:> ${cmdFlow.command}\n`;
                cmdFlow.output.forEach(element => {
                    cmdFlowP += `\n${element}`;
                });
                cmdFlow.error.forEach(element => {
                    cmdFlowP += `\n${element}`;
                });
                cmdFlowP += `\n\nExit code: ${cmdFlow.exitCode}\n`;
                return cmdFlowP;
            }
            let prettyFlow = `Start: ${flow.start}\n`;
            // Get clone info
            prettyFlow += cmdPrint(flow.clone[0]);
            // Get config info
            prettyFlow += `\nProject configuration:\n`
            prettyFlow += typeof flow.configCheck == "string"? flow.configCheck : JSON.stringify(flow.configCheck, null, 4);
            // Get run info
            flow.run.forEach(element => {
                prettyFlow += cmdPrint(element);
            });
            // Get start info
            prettyFlow += cmdPrint(flow.main);
            return prettyFlow;
        }

        function App() {
            const fill = ()=>{
                let logFillText = prettyPrintLog(project.flow);
                let logRowCount = logFillText.split(/\r\n|\r|\n/).length;
                let eventFillText = JSON.stringify(project.lastEvent, null, 4);
                let eventRowCount = eventFillText.split(/\r\n|\r|\n/).length;
                return (
                    <div class="projectDivs">
                        <div>
                            <h2 class="containerHeader">{project.name} details</h2>
                        </div>
                        <div>
                            <p><b>Project GitHub:</b> <em><a target="_blank" href={project.repository.url}> {project.repository.url}</a></em></p>
                        </div>
                        <div class="addressDiv">
                            <p><b>Project root:</b> <em><a id={project.name} target="_blank" href={domain + "/" + project.name + "/"}> {domain + "/" + project.name + "/"}</a></em></p>
                            <button class="copy" onClick={()=>{copy(project.name)}}><i class="fas fa-copy"></i></button>
                        </div>
                        <div>
                            <p><b>Last webhook event:</b><em> {project.lastEvent.time.string}</em></p>
                            <textarea readOnly={true} rows={eventRowCount}>
                                {eventFillText}
                            </textarea>
                        </div>
                        <div class="addressDiv">
                            <p><b>Internal path:</b><em id={project.name+"path"}> {project.path} </em></p>
                            <button class="copy" onClick={()=>{copy(project.name+"path")}}><i class="fas fa-copy"></i></button>
                        </div>
                        <div class="addressDiv">
                            <p><b>Internal address:</b><em id={project.name+"addr"}> {`http://localhost:${project.port}/`}</em></p>
                            <button class="copy" onClick={()=>{copy(project.name+"addr")}}><i class="fas fa-copy"></i></button>
                        </div>
                        <div>
                            <p><b>Last project deployment log:</b> </p>
                            <textarea readOnly={true} rows={logRowCount}>
                                {logFillText}
                            </textarea>
                        </div>
                    </div>
                );
            };
            return (
                <div>
                {
                    fill()
                }
            </div>
            );
        }
        ReactDOM.render(
            <App />,
            document.getElementById('projects')
        );
    </script>
</body>
</html>